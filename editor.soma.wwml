;; TODO: FIXME: currently it appears to be possible to do weird SQL injection like stuff
;; with the cursor because we simply paste into backmap eval and what's
;; most important, do backmap eval AFTER pasting -- terrible. The separation
;; should be clearer! In general, backmap eval is currently undeveloped.

;; INFO: We use the following cursor-centric names for the three main dimensions:
;;
;;    (...above... (...behind... (left | right) ...ahead...) ...below...)
;;

;; GENERAL

;; Get rid of anything that we do not understand.
(backmap [_string | _string (M←_ _*) @_] {(M): ()})

;; INTERPRET
;;
;; *Interpretation* occurs immediately after *subsumption*.
;;
;; *Subsumption* is when some event is put into the cursor's mailbox; in a way,
;; the cursor *subsumes* the event. From this point onwards the event is called
;; a *motion*.
;;
;; *Interpretation* follows. When the user emits (key enter), we can barely guess
;; what that will do; there is a lot of dependence on context. Interpretation seeks
;; to resolve this dependence using advanced pattern matching.
;;
;; The result of interpretation is motions that have a clear, context-independent
;; meaning. For instance, the overly generic (key enter) may be interpreted in some
;; contexts precisely as `expel-left`. in others as `move-right` or `move-below`, etc.

;; Interpret (type)
(backmap [_string | _string (M←(type text_string) _*) @_] {M: (append-left →text)})

;; TODO: refine these
(backmap [(%string nonempty) | "" (M←(type ch←(%any " " "\"" ")" "}" "]")) _*) @_]
  {(M): ((append-left →ch) (expel-left))})

(backmap ["" | "" (M←(type "(") _*) @_] {M: (nest-self)})

;; Interpret (key left) and (key right)
(backmap [(%string nonempty) | _string (M←(key left) _*) @_] {M: (move-left)})
(backmap [_string | (%string nonempty) (M←(key right) _*) @_] {M: (move-right)})
(backmap ["" | (%string nonempty) (M←(key left) _*) @_] {M: (expel-right)})
(backmap [(%string nonempty) | "" (M←(key right) _*) @_] {M: (expel-left)})

(backmap ⧼_ ["" | "" (M←(key left) _*) @_]⧽ {M: (edit-behind)})
(backmap ⧼["" | "" (M←(key right) _*) @_] _⧽ {M: (edit-ahead)})

(backmap [["" | "" (M←(key left) _*) @_] _*] {M: (escape-above)})
(backmap [_* ["" | "" (M←(key right) _*) @_]] {M: (escape-below)})

(backmap [(%string nonempty) | _string (M←(key C-left) _*) @_] {M: (move-word-left)})
(backmap [_string | (%string nonempty) (M←(key C-right) _*) @_] {M: (move-word-right)})

(backmap ["" | "" (M←(key (%any S-up S-left)) _*) @_] {M: (group-behind-front)})
(backmap ["" | "" (M←(key (%any S-down S-right)) _*) @_] {M: (group-ahead-back)})

(backmap [["" | "" (M←(key (%any S-up S-left)) _*) @_] _*] {M: (capture-above-ahead)})
(backmap ⧼[["" | "" (M←(key S-right) _*) @_] _ _+]⧽ {M: (release-ahead-above)})
(backmap ⧼(["" | "" (M←(key S-right) _*) @_] _)⧽ {M: (ungroup-ahead-back)})

(backmap [_* ["" | "" (M←(key (%any S-down S-right)) _*) @_]] {M: (capture-below-behind)})
(backmap ⧼[_+ _ ["" | "" (M←(key S-left) _*) @_]]⧽ {M: (release-behind-below)})
(backmap ⧼(_ ["" | "" (M←(key S-left) _*) @_])⧽ {M: (ungroup-behind-front)})

;; Interpret (key up) and (key down)
(backmap ⧼_ ["" | "" (M←(key up) _*) @_]⧽ {M: (move-behind)})
(backmap ⧼["" | "" (M←(key down) _*) @_] _⧽ {M: (move-ahead)})

(backmap ["" | "" (M←(key C-left) _*) @_] {M: (move-parent-behind)})
(backmap ["" | "" (M←(key C-right) _*) @_] {M: (move-parent-ahead)})

(backmap [_string | _string (M←(key C-up) _*) @_] {M: (move-parent-behind)})
(backmap [_string | _string (M←(key C-down) _*) @_] {M: (move-parent-ahead)})

(backmap [⧼["" | "" (M←(key C-left) _*) @_]⧽ _*] {M: (move-parent-above)})
(backmap [_* ⧼["" | "" (M←(key C-right) _*) @_]⧽] {M: (move-parent-below)})

(backmap ⧼_dict ⧼["" | "" (M←(key C-left) _*) @_]⧽⧽ {M: (move-parent-into-behind)})
(backmap ⧼⧼["" | "" (M←(key C-right) _*) @_]⧽ _dict⧽ {M: (move-parent-into-ahead)})

;; Interpret (key home) and (key end)
(backmap [(%string nonempty) | _string (M←(key home) _*) @_] {M: (move-front-left)})
(backmap [_string | (%string nonempty) (M←(key end) _*) @_] {M: (move-back-right)})

(backmap [_string | _string (M←(key C-S-home) _*) @_] {M: (nest-parent-front)})
(backmap [_string | _string (M←(key C-S-end) _*) @_] {M: (nest-parent-back)})

(backmap ["" | (%string nonempty) (M←(key home) _*) @_] {M: (expel-right)})
(backmap [(%string nonempty) | "" (M←(key end) _*) @_] {M: (expel-left)})

(backmap ⧼["" | "" (M←(key home) _*) @_]⧽ {M: (move-front-behind)})
(backmap ⧼["" | "" (M←(key end) _*) @_]⧽ {M: (move-back-ahead)})

(backmap [["" | "" (M←(key home) _*) @_] _*] {M: (escape-front-above)})
(backmap [_* ["" | "" (M←(key end) _*) @_]] {M: (escape-back-below)})

(backmap [_string | _string (M←(key C-home) _*) @_] {M: (move-parent-front-behind)})
(backmap [_string | _string (M←(key C-end) _*) @_] {M: (move-parent-back-ahead)})

;; Interpret (key enter).
(backmap [(%string nonempty) | "" (M←(key enter) _*) @_] {M: (expel-left)})
(backmap ["" | (%string nonempty) (M←(key enter) _*) @_] {M: (expel-right)})
(backmap [(%string nonempty) | (%string nonempty) (M←(key enter) _*) @_] {M: (expel-mid)})

;; Interpret (key backspace) and (key delete).
(backmap [(%string nonempty) | _string (M←(key backspace) _*) @_] {M: (delete-left)})
(backmap [_string | (%string nonempty) (M←(key delete) _*) @_] {M: (delete-right)})

(backmap [(%string nonempty) | _string (M←(key C-backspace) _*) @_] {M: (delete-word-left)})
(backmap [_string | (%string nonempty) (M←(key C-delete) _*) @_] {M: (delete-word-right)})

(backmap ⧼_ ["" | "" (M←(key C-backspace) _*) @_]⧽ {M: (delete-behind)})
(backmap ⧼["" | "" (M←(key C-delete) _*) @_] _⧽ {M: (delete-ahead)})

(backmap (["" | "" (M←(key C-backspace) _*) @_] _*) {M: (unnest-parent)})
(backmap (_* ["" | "" (M←(key C-delete) _*) @_]) {M: (unnest-parent)})

;; (!) Careful: (key left) and (key right) must not map back to (key backspace)/(key delete)
;; or we'll have occasional infinite rewriting.
(backmap ["" | "" (M←(key backspace) _*) @_] {M: (key left)})
(backmap ["" | "" (M←(key delete) _*) @_] {M: (key right)})

;; For less common actions cursor commands are used instead of complicated
;; and utterly meaningless key combos.
(backmap [lhs←"." | "" (M←(type "(") _*) @_] {lhs: "", M: (nest-behind)})
(backmap [lhs←"." | "" (M←(type "v") _*) @_] {lhs: "", M: (dup-behind)})
(backmap [lhs←"." | "" (M←(type "V") _*) @_] {lhs: "", M: (dup-ahead)})
(backmap [lhs←"." | "" (M←(type "s") _*) @_] {lhs: "", M: (swap-behind)})
(backmap [lhs←"." | "" (M←(type "S") _*) @_] {lhs: "", M: (swap-ahead)})
(backmap [lhs←"." | "" (M←(type "/") _*) @_] {lhs: "", M: (split)})
(backmap [lhs←"." | "" (M←(type "+") _*) @_] {lhs: "", M: (join)})
(backmap [lhs←"." | "" (M←(type "y") _*) @_] {lhs: "", M: (copy-behind)})
(backmap [lhs←"." | "" (M←(type "Y") _*) @_] {lhs: "", M: (copy-ahead)})
(backmap [lhs←"." | "" (M←(type "x") _*) @_] {lhs: "", M: (cut-behind)})
(backmap [lhs←"." | "" (M←(type "X") _*) @_] {lhs: "", M: (cut-ahead)})
(backmap (lhs←"." | "" (M←(type "p") _*) @_ ¦ _ clipboard: _) {lhs: "", M: (paste-behind)})
(backmap (lhs←"." | "" (M←(type "P") _*) @_ ¦ _ clipboard: _) {lhs: "", M: (paste-ahead)})
(backmap [lhs←".-" | "" (M←(type (%any "y" "Y")) _*) @_] {lhs: "", M: (clear-clipboard)})

;; MORPH

(backmap [lhs_string | _string (M←(append-left text_string) _*) @_]
  {(M): (),
   lhs: (~ →lhs →text)})

(backmap [lhs_string | rhs_string (M←(move-left) _*) @_]
  {(M): (),
   lhs: (substring →lhs (rune 0) (rune -2)),
   rhs: (~ (substring →lhs (rune -1) (rune -1)) →rhs)})

(backmap [lhs_string | rhs_string (M←(move-word-left) _*) @_]
  {(M): (),
   lhs: (substring →lhs (word 0) (word -2)),
   rhs: (~ (substring →lhs (word -1) (word -1)) →rhs)})

(backmap [lhs_string | rhs_string (M←(move-right) _*) @_]
  {(M): (),
   lhs: (~ →lhs (substring →rhs (rune 0) (rune 0))),
   rhs: (substring →rhs (rune 1) (rune -1))})

(backmap [lhs_string | rhs_string (M←(move-word-right) _*) @_]
  {(M): (),
   lhs: (~ →lhs (substring →rhs (word 0) (word 0))),
   rhs: (substring →rhs (word 1) (word -1))})

(backmap [lhs_string | _string (M←(delete-left) _*) @_]
  {(M): (),
   lhs: (substring →lhs (rune 0) (rune -2))})

(backmap [lhs_string | _string (M←(delete-word-left) _*) @_]
  {(M): (),
   lhs: (substring →lhs (word 0) (word -2))})

(backmap [_string | rhs_string (M←(delete-right) _*) @_]
  {(M): (),
   rhs: (substring →rhs (rune 1) (rune -1))})

(backmap [_string | rhs_string (M←(delete-word-right) _*) @_]
  {(M): (),
   rhs: (substring →rhs (word 1) (word -1))})

(backmap [lhs_string | rhs_string (M←(move-front-left) _*) @_]
  {(M): (), lhs: "", rhs: (~ →lhs →rhs)})

(backmap [lhs_string | rhs_string (M←(move-back-right) _*) @_]
  {(M): (), lhs: (~ →lhs →rhs), rhs: ""})

(backmap C←[_string | _string (M←(nest-self) _*) @_]
  {(M): (), C: (↑C)})

(backmap ⧼behind_ [_string | _string (M←(nest-behind) _*) @_]⧽
  {(M): (), behind: (↑behind)})

(backmap P←⧼C←[_string | _string (M←(nest-parent-front) _*) @_]⧽
  {(M): (), (C): ($tr C0 ()), P: (↑C0 ↑P)})

(backmap P←⧼C←[_string | _string (M←(nest-parent-back) _*) @_]⧽
  {(M): (), (C): ($tr C0 ()), P: (↑P ↑C0)})

(backmap P←⧼[_string | _string (M←(unnest-parent) _*) @_]⧽
  {(M): (), (P): ↑P})

(backmap ⧼behind_ [lhs←"" | "" (M←(edit-behind) _*) @_]⧽
  {(M): (), (behind): (), lhs: (string →behind)})

(backmap ⧼[_* ⭳back] C←[lhs←"" | "" (M←(edit-behind) _*) @_]⧽
  {(M): (), (C): (), back: ↑C})

(backmap ⧼["" | rhs←"" (M←(edit-ahead) _*) @_] ahead_⧽
  {(M): (), rhs: (string →ahead), (ahead): ()})

(backmap ⧼C←["" | "" (M←(edit-ahead) _*) @_] [⭳front _*]⧽
  {(M): (), (C): (), front: ↑C})

;; If the user attempts to edit an edge, show them the pretty-printed
;; version of the edge rather than its underlying dict implementation.
(backmap ⧼@edge_ C←[lhs←"" | "" (M←(edit-behind) _*) @_]⧽
 {(M): (), (edge): (), lhs: (string →edge)})

(backmap ⧼C←["" | rhs←"" (M←(edit-ahead) _*) @_] @edge_⧽
 {(M): (), (edge): (), rhs: (string →edge)})

(backmap ⧼behind_ C←[_string | _string (M←(move-behind) _*) @_]⧽
  {(M): (), C: ↑behind, behind: ↑C})

(backmap ⧼C←[_string | _string (M←(move-ahead) _*) @_] ahead_⧽
  {(M): (), C: ↑ahead, ahead: ↑C})

(backmap [⭳front _* C←[_string | _string (M←(move-front-behind) _*) @_] _*]
  {(M): (), (C): (), front: ↑C})

(backmap [_* C←[_string | _string (M←(move-back-ahead) _*) @_] _* ⭳back]
  {(M): (), (C): (), back: ↑C})

(backmap ⧼behind_ [_string | _string (M←(delete-behind) _*) @_]⧽
  {(M): (), (behind): ()})

(backmap ⧼[_string | _string (M←(delete-ahead) _*) @_] ahead_⧽
  {(M): (), (ahead): ()})

(backmap [_* ⭳above ⧼C←[_string | _string (M←(escape-above) _*) @_]⧽ _*]
  {(M): (), above: ↑C0, (C): ($tr C0 ())})

(backmap [_* ⧼C←[_string | _string (M←(escape-below) _*) @_]⧽ ⭳below _*]
  {(M): (), below: ↑C0, (C): ($tr C0 ())})

(backmap [⭳front _* ⧼C←[_string | _string (M←(escape-front-above) _*) @_]⧽ _*]
  {(M): (), front: ↑C0, (C): ($tr C0 ())})

(backmap [_* ⧼C←[_string | _string (M←(escape-back-below) _*) @_]⧽ _* ⭳below]
  {(M): (), below: ↑C0, (C): ($tr C0 ())})

(backmap ⧼behind_ [_string | _string (M←(dup-behind) _*) @_]⧽
  {(M): (), (behind): (↑behind ↑behind)})

(backmap ⧼[_string | _string (M←(dup-ahead) _*) @_] ahead_⧽
  {(M): (), (ahead): (↑ahead ↑ahead)})

(backmap ⧼a_ b_ [_string | _string (M←(swap-behind) _*) @_]⧽
  {(M): (), a: ↑b, b: ↑a})

(backmap ⧼[_string | _string (M←(swap-ahead) _*) @_] a_ b_⧽
  {(M): (), a: ↑b, b: ↑a})

(backmap P←(behind_* C←[_string | _string (M←(split) _*) @_] ahead_*)
  {(M): (), (P): (↑behind ↑C ↑ahead)})

(backmap ⧼[_* ⭳mid ⭳rhs] C←[_string | _string (M←(join) _*) @_] ahead←(_*)⧽
  {(M): (), mid: ↑C, (rhs): ↑ahead, (C): (), (ahead): ()})

(backmap ⧼behind_ (_string | _string (M←(copy-behind) _*) @_ ¦ _ clipboard: (%optional () clipboard_))⧽
  {(M): (), clipboard: (copy →behind)})

(backmap ⧼behind_ (_string | _string (M←(cut-behind) _*) @_ ¦ _ clipboard: (%optional () clipboard_))⧽
  {(M): (), (behind): (), clipboard: (cut →behind)})

(backmap ⧼(_string | _string (M←(copy-ahead) _*) @_ ¦ _ clipboard: (%optional () clipboard_)) ahead_⧽
  {(M): (), clipboard: (copy →ahead)})

(backmap ⧼(_string | _string (M←(cut-ahead) _*) @_ ¦ _ clipboard: (%optional () clipboard_)) ahead_⧽
  {(M): (), (ahead): (), clipboard: (cut →ahead)})

(backmap C←(_string | _string (M←(paste-behind) _*) @_ ¦ _ clipboard: (copy term_))
  {(M): (), (C): (↑term ↑C)})

(backmap C←(_string | _string (M←(paste-ahead) _*) @_ ¦ _ clipboard: (copy term_))
  {(M): (), (C): (↑C ↑term)})

(backmap C←(_string | _string (M←(paste-behind) _*) @_ ¦ _ clipboard: clipboard←(cut term_))
  {(M): (), (C): (↑term ↑C), (clipboard): ()})

(backmap C←(_string | _string (M←(paste-ahead) _*) @_ ¦ _ clipboard: clipboard←(cut term_))
  {(M): (), (C): (↑C ↑term), (clipboard): ()})

(backmap (_string | _string (M←(clear-clipboard) _*) @_ ¦ _ clipboard: clipboard_)
  {(M): (), (clipboard): ()})

(backmap ⧼behind_ C←[_string | _string (M←(group-behind-front) _*) @_]⧽
  {(M): (), (behind): (), C: (↑C ↑behind)})

(backmap ⧼P←(behind_ C←[_string | _string (M←(ungroup-behind-front) _*) @_])⧽
  {(M): (), behind: ↑C, C: ↑behind, (P): ↑P})

(backmap ⧼C←[_string | _string (M←(group-ahead-back) _*) @_] ahead_⧽
  {(M): (), (ahead): (), C: (↑ahead ↑C)})

(backmap ⧼P←(C←[_string | _string (M←(ungroup-ahead-back) _*) @_] ahead_)⧽
  {(M): (), ahead: ↑C, C: ↑ahead, (P): ↑P})

(backmap ⧼above_ [C←[_string | _string (M←(capture-above-ahead) _*) @_] _*]⧽
  {(M): (), (above): (), (C): (↑C ↑above)})

(backmap ⧼[_* C←[_string | _string (M←(capture-below-behind) _*) @_]] below_⧽
  {(M): (), (below): (), (C): (↑below ↑C)})

(backmap ⧼P←[[_string | _string (M←(release-ahead-above) _*) @_] ahead_ _*]⧽
  {(M): (), (ahead): ($tr ahead0 ()), (P): (↑ahead0 ↑P)})

(backmap ⧼P←[_* behind_ [_string | _string (M←(release-behind-below) _*) @_]]⧽
  {(M): (), (behind): ($tr behind0 ()), (P): (↑P ↑behind0)})

(backmap ⧼behind_ P←⧼[_string | _string (M←(move-parent-behind) _*) @_]⧽⧽
  {(M): (), behind: ↑P, P: ↑behind})

(backmap ⧼P←⧼[_string | _string (M←(move-parent-ahead) _*) @_]⧽ ahead_⧽
  {(M): (), ahead: ↑P, P: ↑ahead})

(backmap [⭳target _* P←⧼[_string | _string (M←(move-parent-front-behind) _*) @_]⧽ _*]
  {(M): (), target: ↑P, (P): ()})

(backmap [_* P←⧼[_string | _string (M←(move-parent-back-ahead) _*) @_]⧽ _* ⭳target]
  {(M): (), target: ↑P, (P): ()})

;; GP is for "grandparent"
(backmap GP←⧼P←⧼[_string | _string (M←(move-parent-below) _*) @_]⧽⧽
  {(M): (), (P): ($tr P0 ()), (GP): (↑GP ↑P0)})

(backmap GP←⧼P←⧼[_string | _string (M←(move-parent-above) _*) @_]⧽⧽
  {(M): (), (P): ($tr P0 ()), (GP): (↑P0 ↑GP)})

(backmap ⧼(_* ⭳target ¦ _) P←⧼[_string | _string (M←(move-parent-into-behind) _*) @_]⧽⧽
  {(M): (), (P): (), target: ↑P})

(backmap ⧼P←⧼[_string | _string (M←(move-parent-into-ahead) _*) @_]⧽ (⭳target _* ¦ _)⧽
  {(M): (), (P): (), target: ↑P})

;; Expellation
;;
;; Expellation involves parsing left/right-hand sides (or both). If that's
;; successful the term is expelled to the left or to the right of the cursor,
;; and the corresponding side is cleared.
(backmap [lhs_string | _string (M←(expel-left) _*) @_]
  {(M): ((ml →lhs) (expel-left/finalize))})

(backmap [_* ⭳pred [lhs_string | _string (M0←(ml/ok term_) M1←(expel-left/finalize) _*) @_] _*]
  {(M0): (), (M1): (), lhs: "", pred: →term})

(backmap [_string | _string (M0←(ml/err) M1←(expel-left/finalize) _*) @_]
  {(M0): (), (M1): ()})

(backmap [_string | rhs_string (M←(expel-right) _*) @_]
  {(M): ((ml →rhs) (expel-right/finalize))})

(backmap [_* [_string | rhs_string (M0←(ml/ok term_) M1←(expel-right/finalize) _*) @_] ⭳succ _*]
  {(M0): (), (M1): (), rhs: "", succ: →term})

(backmap [_string | _string (M0←(ml/err) M1←(expel-right/finalize) _*) @_]
  {(M0): (), (M1): ()})

(backmap [lhs_string | _string (M←(expel-mid) _*) @_]
  {(M): ((ml →lhs) (expel-mid/r))})

(backmap [_string | rhs_string ((ml/ok _) M←(expel-mid/r) _*) @_]
  {(M): ((ml →rhs) (expel-mid/finalize))})

(backmap [_string | _string (M0←(ml/err) M1←(expel-mid/r) _*) @_]
  {(M0): (), (M1): ()})

(backmap [_* ⭳pred [lhs_string | rhs_string (M0←(ml/ok lterm_) M1←(ml/ok rterm_) M2←(expel-mid/finalize) _*) @_] ⭳succ _*]
  {(M0): (), (M1): (), (M2): (), lhs: "", rhs: "", pred: →lterm, succ: →rterm})

(backmap [_string | _string (M0←(ml/ok _) M1←(ml/err) M2←(expel-mid/finalize) _*) @_]
  {(M0): (), (M1): (), (M2): ()})


